/* tslint:disable */
/* eslint-disable */
/**
 * Hospital guidance API
 * Hospital guidance API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xschmidtd@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { AxiosInstance, AxiosPromise, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import type { Configuration } from './configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from './base';
import { DUMMY_BASE_URL, assertParamExists, createRequestFunction, serializeDataIfNeeded, setSearchParams, toPathString } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface GuidanceEntry
 */
export interface GuidanceEntry {
    /**
     * Guidance ID
     * @type {string}
     * @memberof GuidanceEntry
     */
    'id': string;
    /**
     * Name of the patient
     * @type {string}
     * @memberof GuidanceEntry
     */
    'patientName': string;
    /**
     * Title of the guidance
     * @type {string}
     * @memberof GuidanceEntry
     */
    'title': string;
    /**
     * Ambulance ID
     * @type {string}
     * @memberof GuidanceEntry
     */
    'ambulanceId': string;
    /**
     * Description of the guidance
     * @type {string}
     * @memberof GuidanceEntry
     */
    'description': string;
    /**
     * Severity of the guidance
     * @type {string}
     * @memberof GuidanceEntry
     */
    'severity': GuidanceEntrySeverityEnum;
    /**
     * Date and time of the guidance creation
     * @type {string}
     * @memberof GuidanceEntry
     */
    'createdAt': string;
    /**
     * Response from the hospital doctor
     * @type {string}
     * @memberof GuidanceEntry
     */
    'response'?: string;
    /**
     *
     * @type {string}
     * @memberof GuidanceEntry
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof GuidanceEntry
     */
    'phoneNumber'?: string;
}

export const GuidanceEntrySeverityEnum = {
    Low: 'low',
    Medium: 'medium',
    High: 'high'
} as const;

export type GuidanceEntrySeverityEnum = typeof GuidanceEntrySeverityEnum[keyof typeof GuidanceEntrySeverityEnum];


/**
 * HospitalGuidanceListApi - axios parameter creator
 * @export
 */
export const HospitalGuidanceListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create hospital guidance for patient for ambulance
         * @summary Create hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance id
         * @param {GuidanceEntry} guidanceEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHospitalGuidance: async (ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createHospitalGuidance', 'ambulanceId', ambulanceId)
            // verify required parameter 'guidanceId' is not null or undefined
            assertParamExists('createHospitalGuidance', 'guidanceId', guidanceId)
            // verify required parameter 'guidanceEntry' is not null or undefined
            assertParamExists('createHospitalGuidance', 'guidanceEntry', guidanceEntry)
            const localVarPath = `/guidance-list/{ambulanceId}/{guidanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"guidanceId"}}`, encodeURIComponent(String(guidanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guidanceEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete hospital guidance for ambulance
         * @summary Delete hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHospitalGuidance: async (ambulanceId: string, guidanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteHospitalGuidance', 'ambulanceId', ambulanceId)
            // verify required parameter 'guidanceId' is not null or undefined
            assertParamExists('deleteHospitalGuidance', 'guidanceId', guidanceId)
            const localVarPath = `/guidance-list/{ambulanceId}/{guidanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"guidanceId"}}`, encodeURIComponent(String(guidanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get hospital guidance for ambulance
         * @summary Get hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHospitalGuidance: async (ambulanceId: string, guidanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getHospitalGuidance', 'ambulanceId', ambulanceId)
            // verify required parameter 'guidanceId' is not null or undefined
            assertParamExists('getHospitalGuidance', 'guidanceId', guidanceId)
            const localVarPath = `/guidance-list/{ambulanceId}/{guidanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"guidanceId"}}`, encodeURIComponent(String(guidanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get hospital guidance list for ambulance
         * @summary Get hospital guidance list
         * @param {string} ambulanceId Ambulance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHospitalGuidanceList: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getHospitalGuidanceList', 'ambulanceId', ambulanceId)
            const localVarPath = `/guidance-list/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update hospital guidance for ambulance
         * @summary Update hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {GuidanceEntry} guidanceEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHospitalGuidance: async (ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateHospitalGuidance', 'ambulanceId', ambulanceId)
            // verify required parameter 'guidanceId' is not null or undefined
            assertParamExists('updateHospitalGuidance', 'guidanceId', guidanceId)
            // verify required parameter 'guidanceEntry' is not null or undefined
            assertParamExists('updateHospitalGuidance', 'guidanceEntry', guidanceEntry)
            const localVarPath = `/guidance-list/{ambulanceId}/{guidanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"guidanceId"}}`, encodeURIComponent(String(guidanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guidanceEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HospitalGuidanceListApi - functional programming interface
 * @export
 */
export const HospitalGuidanceListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HospitalGuidanceListApiAxiosParamCreator(configuration)
    return {
        /**
         * Create hospital guidance for patient for ambulance
         * @summary Create hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance id
         * @param {GuidanceEntry} guidanceEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHospitalGuidance(ambulanceId, guidanceId, guidanceEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete hospital guidance for ambulance
         * @summary Delete hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHospitalGuidance(ambulanceId: string, guidanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHospitalGuidance(ambulanceId, guidanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get hospital guidance for ambulance
         * @summary Get hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHospitalGuidance(ambulanceId: string, guidanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuidanceEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHospitalGuidance(ambulanceId, guidanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get hospital guidance list for ambulance
         * @summary Get hospital guidance list
         * @param {string} ambulanceId Ambulance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHospitalGuidanceList(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuidanceEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHospitalGuidanceList(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update hospital guidance for ambulance
         * @summary Update hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {GuidanceEntry} guidanceEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHospitalGuidance(ambulanceId, guidanceId, guidanceEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HospitalGuidanceListApi - factory interface
 * @export
 */
export const HospitalGuidanceListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HospitalGuidanceListApiFp(configuration)
    return {
        /**
         * Create hospital guidance for patient for ambulance
         * @summary Create hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance id
         * @param {GuidanceEntry} guidanceEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: any): AxiosPromise<void> {
            return localVarFp.createHospitalGuidance(ambulanceId, guidanceId, guidanceEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete hospital guidance for ambulance
         * @summary Delete hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHospitalGuidance(ambulanceId: string, guidanceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteHospitalGuidance(ambulanceId, guidanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get hospital guidance for ambulance
         * @summary Get hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHospitalGuidance(ambulanceId: string, guidanceId: string, options?: any): AxiosPromise<GuidanceEntry> {
            return localVarFp.getHospitalGuidance(ambulanceId, guidanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get hospital guidance list for ambulance
         * @summary Get hospital guidance list
         * @param {string} ambulanceId Ambulance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHospitalGuidanceList(ambulanceId: string, options?: any): AxiosPromise<Array<GuidanceEntry>> {
            return localVarFp.getHospitalGuidanceList(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update hospital guidance for ambulance
         * @summary Update hospital guidance
         * @param {string} ambulanceId Ambulance ID
         * @param {string} guidanceId Guidance ID
         * @param {GuidanceEntry} guidanceEntry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: any): AxiosPromise<void> {
            return localVarFp.updateHospitalGuidance(ambulanceId, guidanceId, guidanceEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HospitalGuidanceListApi - interface
 * @export
 * @interface HospitalGuidanceListApi
 */
export interface HospitalGuidanceListApiInterface {
    /**
     * Create hospital guidance for patient for ambulance
     * @summary Create hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance id
     * @param {GuidanceEntry} guidanceEntry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApiInterface
     */
    createHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Delete hospital guidance for ambulance
     * @summary Delete hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApiInterface
     */
    deleteHospitalGuidance(ambulanceId: string, guidanceId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get hospital guidance for ambulance
     * @summary Get hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApiInterface
     */
    getHospitalGuidance(ambulanceId: string, guidanceId: string, options?: AxiosRequestConfig): AxiosPromise<GuidanceEntry>;

    /**
     * Get hospital guidance list for ambulance
     * @summary Get hospital guidance list
     * @param {string} ambulanceId Ambulance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApiInterface
     */
    getHospitalGuidanceList(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<GuidanceEntry>>;

    /**
     * Update hospital guidance for ambulance
     * @summary Update hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance ID
     * @param {GuidanceEntry} guidanceEntry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApiInterface
     */
    updateHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * HospitalGuidanceListApi - object-oriented interface
 * @export
 * @class HospitalGuidanceListApi
 * @extends {BaseAPI}
 */
export class HospitalGuidanceListApi extends BaseAPI implements HospitalGuidanceListApiInterface {
    /**
     * Create hospital guidance for patient for ambulance
     * @summary Create hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance id
     * @param {GuidanceEntry} guidanceEntry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApi
     */
    public createHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: AxiosRequestConfig) {
        return HospitalGuidanceListApiFp(this.configuration).createHospitalGuidance(ambulanceId, guidanceId, guidanceEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete hospital guidance for ambulance
     * @summary Delete hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApi
     */
    public deleteHospitalGuidance(ambulanceId: string, guidanceId: string, options?: AxiosRequestConfig) {
        return HospitalGuidanceListApiFp(this.configuration).deleteHospitalGuidance(ambulanceId, guidanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get hospital guidance for ambulance
     * @summary Get hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApi
     */
    public getHospitalGuidance(ambulanceId: string, guidanceId: string, options?: AxiosRequestConfig) {
        return HospitalGuidanceListApiFp(this.configuration).getHospitalGuidance(ambulanceId, guidanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get hospital guidance list for ambulance
     * @summary Get hospital guidance list
     * @param {string} ambulanceId Ambulance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApi
     */
    public getHospitalGuidanceList(ambulanceId: string, options?: AxiosRequestConfig) {
        return HospitalGuidanceListApiFp(this.configuration).getHospitalGuidanceList(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update hospital guidance for ambulance
     * @summary Update hospital guidance
     * @param {string} ambulanceId Ambulance ID
     * @param {string} guidanceId Guidance ID
     * @param {GuidanceEntry} guidanceEntry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HospitalGuidanceListApi
     */
    public updateHospitalGuidance(ambulanceId: string, guidanceId: string, guidanceEntry: GuidanceEntry, options?: AxiosRequestConfig) {
        return HospitalGuidanceListApiFp(this.configuration).updateHospitalGuidance(ambulanceId, guidanceId, guidanceEntry, options).then((request) => request(this.axios, this.basePath));
    }
}


